# File name: swarm_control.py
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist, Pose
from nav_msgs.msg import Odometry
import math

class SwarmControl(Node):
    def __init__(self):
        super().__init__('swarm_control')
        self.publisher1 = self.create_publisher(Twist, 'swarm/robot1/cmd_vel', 10)
        self.publisher2 = self.create_publisher(Twist, 'swarm/robot2/cmd_vel', 10)
        self.publisher3 = self.create_publisher(Twist, 'swarm/robot3/cmd_vel', 10)
        self.subscription1 = self.create_subscription(Odometry, 'swarm/robot1/odom', self.robot1_odom_callback, 10)
        self.subscription2 = self.create_subscription(Odometry, 'swarm/robot2/odom', self.robot2_odom_callback, 10)
        self.subscription3 = self.create_subscription(Odometry, 'swarm/robot3/odom', self.robot3_odom_callback, 10)
        self.robot1_pose = Pose()
        self.robot2_pose = Pose()
        self.robot3_pose = Pose()
        self.distance = 2.0  # Desired distance from the leader
        self.k_align = 0.3
        self.k_cohesion = 0.2
        self.k_separation = 0.5

    def robot1_odom_callback(self, msg):
        self.robot1_pose = msg.pose.pose

    def robot2_odom_callback(self, msg):
        self.robot2_pose = msg.pose.pose

    def robot3_odom_callback(self, msg):
        self.robot3_pose = msg.pose.pose

    def move_robot(self, publisher, robot_pose, other_poses):
        msg = Twist()
        
        # Alignment
        align_vel = Twist()
        for pose in other_poses:
            align_vel.linear.x += pose.position.x
            align_vel.linear.y += pose.position.y
        align_vel.linear.x /= len(other_poses)
        align_vel.linear.y /= len(other_poses)
        
        # Cohesion
        cohesion_vel = Twist()
        for pose in other_poses:
            cohesion_vel.linear.x += pose.position.x
            cohesion_vel.linear.y += pose.position.y
        cohesion_vel.linear.x /= len(other_poses)
        cohesion_vel.linear.y /= len(other_poses)

        # Separation
        separation_vel = Twist()
        for pose in other_poses:
            distance = math.sqrt((pose.position.x - robot_pose.position.x) ** 2 + (pose.position.y - robot_pose.position.y) ** 2)
            if distance > 0 and distance < self.distance:
                separation_vel.linear.x -= (pose.position.x - robot_pose.position.x) / distance
                separation_vel.linear.y -= (pose.position.y - robot_pose.position.y) / distance
        
        # Total velocity
        msg.linear.x = self.k_align * align_vel.linear.x + self.k_cohesion * cohesion_vel.linear.x + self.k_separation * separation_vel.linear.x
        msg.angular.z = self.k_align * align_vel.linear.y + self.k_cohesion * cohesion_vel.linear.y + self.k_separation * separation_vel.linear.y

        publisher.publish(msg)

def main(args=None):
    rclpy.init(args=args)
    swarm_control = SwarmControl()

    rclpy.spin(swarm_control)
    swarm_control.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
